package com.capgemini.service;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import com.capgemini.dto.DiagnosticCenter;
import com.capgemini.service.ServiceImplementation;
import com.capgemini.service.Validation;
import com.capgemini.util.CollectionUtil;
import com.capgemini.dto.CenterTest;;

class ServiceTesting {

	ServiceImplementation si=new ServiceImplementation();
	
	Validation v = new Validation();
	
	@ParameterizedTest
	@ValueSource(strings= {"Deva Diagnostic Center","Satish","Sai Chaitanya Diagnostic Center"})
	void testingAddCenter(String centerName)//testing whether the center name giving is adding to center list or not.
	{
		assertEquals(true,si.addCenter(new DiagnosticCenter(CollectionUtil.centerAutogeneratedId(),centerName)));//passing center object as argument and checking whether it returning true if added to center list.
	}
	
	@Test
	void testingRemoveCenter()//testing whether the center object provided is removing or not.
	{
		assertEquals(true,si.removeCenter(CollectionUtil.centerList.get(1)));//passing the center object as argument and checking whether it returning true if removed from the center list.
	}
	
	@ParameterizedTest
	@ValueSource(strings= {"malaria","jaundice","hiv"})
	void testingAddTest(String testName)//testing whether the test object provided is adding to the provided center or not.
	{
		assertEquals("test added successfully",si.addTest(CollectionUtil.centerList.get(0),new CenterTest(CollectionUtil.testAutogeneratedId(),testName)));//passing the center object in which we can add the test object and the second argument is the test object. 
	}
	
	@Test
	void testingRemoveTest()//testing whether the test object provided is removed from the provided center or not.
	{
		assertEquals(true,si.removeTest(CollectionUtil.centerList.get(0),CollectionUtil.listOfTests1.get(0)));//passing the center object as argument in which the test object can be removed and the second argument is the test object that we want to remove.
	}
	
	@Test
	void testingGetCenterObjectOfcenterId()//testing whether the centerId given is returning its corresponding center object.
	{
		assertEquals(CollectionUtil.centerList.get(0),si.getCenterObjectOfcenterId("C1"));//passing the centerId as the first argument and checking whether its giving its corresponding center object
	}
	
	@ParameterizedTest
	@ValueSource(strings= {"Sai Chaitanya Diagnostic Center"})//"Satyam gives false because it is not present in any of the centerObject in the center list."
	void testingIsCenterNamePresent(String centerName)//testing whether the given center name is present in any of the centerObject in the center list.
	{
		assertEquals(true,si.isCenterNamePresent(centerName));
	}
	
	@Test
	void testingIsCenterIdPresent()//testing whether the given center Id is present in any of the centerObject in the center list.
	{
		assertEquals(true,si.isCenterIdPresent("C1"));
	}
	
	@Test
	void testingGetTestObject()//testing whether the given test Id of the particular center object is giving its corresponding test object of the respective center.
	{
		assertEquals(CollectionUtil.listOfTests1.get(0),si.getTestObject(CollectionUtil.centerList.get(0), "T2"));
	}
	
	@Test
	void testingIsTestNamePresent()//testing whether the given test name is present in particular center object.
	{
		assertEquals(true,si.isTestNamePresent(CollectionUtil.centerList.get(0),"blood pressure"));
	}
	
	@ParameterizedTest
	@ValueSource(strings= {"T3","T2"})//"T4 gives false because it is not present in the particular given center object "
	void testingIsTestIdPresent(String testId)//testing whether the given test Id is present in the particular center object. 
	{
		assertEquals(true,si.isTestIdPresent(CollectionUtil.centerList.get(0), testId));
	}
	
	@ParameterizedTest
	@ValueSource(strings= {"Satyam","Raj diagnostic center","Ravi"})//"Sai Chaitanya Diagnostic Center" give false because it is already present in the center list. "arun" center name will also give false because center name must start with capital letter.
	void testingValidateCenterName(String centerName)
	{
		assertEquals(true,v.validateCenterName(centerName));//testing whether the given centerName is valid one or not.
	}
	
	@ParameterizedTest
	@ValueSource(strings= {"C1"})//"C2" gives false because its already removed in before test cases. "C3" also gives false because it is not present in the center list.
	void testingValidateCenterId(String centerId)//testing whether the given centerId is valid one or not.
	{
		assertEquals(true,v.validateCenterId(centerId));
	}
	
	@ParameterizedTest
	@ValueSource(strings= {"urine test","jaundice test"})//"blood group" gives false because it is already present so we cannot take this testName to add.
	void testingvalidateCenterTest(String testName)
	{
		assertEquals(true,v.validateCenterTest(CollectionUtil.centerList.get(0), testName));//testing whether the given testName for the particular center object is valid or not
	}
	
	@ParameterizedTest
	@ValueSource(strings= {"T1","T3"})//"t5" gives false because it is not present in the test list of that center object.
	void testingValidateCenterTestId(String testId)
	{
		assertEquals(true,v.validateCenterTestId(CollectionUtil.centerList.get(0),testId));//testing whether the given testId for the particular center object is valid or not.
	}
	
}
